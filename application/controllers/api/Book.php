<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/REST_Controller.php';

class Book extends REST_Controller {

    function __construct()
    {
        //enable cors
        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['books_get']['limit'] = 500; // 500 requests per hour per book/key
        $this->methods['books_post']['limit'] = 100; // 100 requests per hour per book/key
        $this->methods['books_delete']['limit'] = 50; // 50 requests per hour per book/key
        $this->load->model('Book_model');
    }

    public function books_get()
    {
        $books=$this->Book_model->get_books();

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the books

        if ($id === NULL)
        {
            // Check if the books data store contains books (in case the database result returns NULL)
            if ($books)
            {
                // Set the response and exit
                $this->response($books, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No books were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular book.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the book from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $book = NULL;

        if (!empty($books))
        {
            //Get the book from database
            $book=$this->Book_model->get_book($id);
        }

        if (!empty($book))
        {
            $this->set_response($book, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'book could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function books_post()
    {
        // Add a new book
        $add_data=array(
          'book_id'=>$this->post('book_id'),
          'book_name'=>$this->post('book_name'),
          'author'=>$this->post('author'),
          'isbn'=>$this->post('isbn')
        );
        $this->Book_model->add_book($add_data);

        $message = [
            'book_id' => $this->post('book_id'), 
            'book_name' => $this->post('book_name'),
            'author' => $this->post('author'),
            'isbn'=>$this->post('isbn'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
    public function books_put()
    {
        // Update the book
        $id=$this->put('book_id');
        $update_data=array(
          'book_name'=>$this->put('book_name'),
          'author'=>$this->put('author'),
          'isbn'=>$this->put('isbn')
        );
        $this->Book_model->update_book($id, $update_data);

        $message = [
            'book_id' => $this->put('book_id'), // Automatically generated by the model
            'book_name' => $this->put('book_name'),
            'author'=>$this->put('author'),
            'isbn'=>$this->put('isbn'),
            'message' => 'Updates a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function books_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        //check if the book exists
        $test=$this->Book_model->get_book($id);
        if(!empty($test[0]['book_name'])) {
          $this->Book_model->delete_book($id);
          $message = [
              'book_id' => $book_id,
              'message' => 'Deleted the resource'
          ];
          $this->set_response($message, REST_Controller::HTTP_OK);
        }
        else {
          $message="Error";
          $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
        }
        }



}
